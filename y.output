Terminals which are not used

   DECREMENT_ONE
   DECREMENT
   INCREMENT_ONE
   INCREMENT
   PTR_SELECT
   OPEN_SQ_BRKT
   CLOSE_SQ_BRKT
   BITWISE_NOT
   TERNARY_COND
   TERNARY_COLON
   ACCESS_DOT
   UNARY


State 42 conflicts: 1 shift/reduce
State 44 conflicts: 1 shift/reduce
State 48 conflicts: 1 shift/reduce
State 56 conflicts: 1 shift/reduce
State 60 conflicts: 1 shift/reduce
State 130 conflicts: 18 shift/reduce
State 131 conflicts: 18 shift/reduce
State 142 conflicts: 1 shift/reduce
State 143 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 165 conflicts: 1 shift/reduce
State 166 conflicts: 1 shift/reduce


Grammar

    0 $accept: code $end

    1 code: STRUCTURE code
    2     | /* empty */

    3 STRUCTURE: GLODECL
    4          | FUNC
    5          | FUN_DECL

    6 GLODECL: type IDENTIFIER INI_CONST GLO_LIST sc

    7 INI_CONST: ASSIGN CONST
    8          | /* empty */

    9 GLO_LIST: COMMA type IDENTIFIER INI_CONST GLO_LIST
   10         | /* empty */

   11 FUN_DECL: type IDENTIFIER OPEN_PAR ARG CLOSE_PAR sc
   12         | VOID IDENTIFIER OPEN_PAR ARG CLOSE_PAR sc

   13 FUNC: type IDENTIFIER OPEN_PAR ARG CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES
   14     | VOID IDENTIFIER OPEN_PAR ARG CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

   15 ARG: type IDENTIFIER arg
   16    | VOID
   17    | /* empty */

   18 arg: COMMA type IDENTIFIER arg
   19    | /* empty */

   20 BODY: stmt BODY
   21     | /* empty */

   22 LOOPBODY: X LOOPBODY
   23         | /* empty */

   24 X: stmt
   25  | BREAK sc
   26  | CONTINUE sc

   27 stmt: DECL
   28     | ifblock
   29     | forblock
   30     | whileblock
   31     | functioncall
   32     | EXP
   33     | return_stm
   34     | sc

   35 ifblock: IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES ELSE OPEN_BRACES BODY CLOSE_BRACES
   36        | IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

   37 whileblock: WHILE OPEN_PAR EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES

   38 forblock: FOR OPEN_PAR EXP DELIMITER EXP DELIMITER EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES

   39 functioncall: IDENTIFIER OPEN_PAR temp CLOSE_PAR

   40 temp: EXP
   41     | temp COMMA EXP

   42 return_stm: RETURN EXP sc
   43           | RETURN sc
   44           | RETURN functioncall sc

   45 DECL: TYPE IDENTIFIER INITIALIZE VAR_LIST sc

   46 VAR_LIST: COMMA TYPE IDENTIFIER INITIALIZE VAR_LIST
   47         | /* empty */

   48 TYPE: type
   49     | /* empty */

   50 INITIALIZE: ASSIGN EXP
   51           | /* empty */

   52 CONST: DEC_CONSTANT
   53      | HEX_CONSTANT

   54 EXP: OPEN_PAR EXP CLOSE_PAR
   55    | EXP RLOP EXP
   56    | EXP LGOP EXP
   57    | CONST
   58    | IDENTIFIER
   59    | STRING
   60    | EXP PLUS EXP
   61    | EXP MINUS EXP
   62    | EXP STAR EXP
   63    | EXP FW_SLASH EXP
   64    | EXP MODULO EXP
   65    | EXP LS_SHIFT EXP
   66    | EXP RS_SHIFT EXP
   67    | EXP BITWISE_AND EXP
   68    | EXP BITWISE_XOR EXP
   69    | EXP BITWISE_OR EXP

   70 type: sign dt pt

   71 sign: SIGNED
   72     | UNSIGNED
   73     | /* empty */

   74 dt: INT
   75   | FLOAT
   76   | CHAR
   77   | LONG
   78   | LONG_LONG
   79   | SHORT

   80 pt: STAR pt
   81   | /* empty */

   82 RLOP: LS_THAN_EQ
   83     | GR_THAN_EQ
   84     | EQ
   85     | NOT_EQ
   86     | LS_THAN
   87     | GR_THAN

   88 LGOP: LOGICAL_AND
   89     | LOGICAL_OR

   90 sc: DELIMITER sc
   91   | DELIMITER


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 74
FLOAT (259) 75
CHAR (260) 76
LONG (261) 77
LONG_LONG (262) 78
SHORT (263) 79
SIGNED (264) 71
UNSIGNED (265) 72
VOID (266) 12 14 16
FOR (267) 38
WHILE (268) 37
BREAK (269) 25
CONTINUE (270) 26
IF (271) 35 36
ELSE (272) 35
RETURN (273) 42 43 44
IDENTIFIER (274) 6 9 11 12 13 14 15 18 39 45 46 58
HEX_CONSTANT (275) 53
DEC_CONSTANT (276) 52
STRING (277) 59
DECREMENT_ONE (278)
DECREMENT (279)
INCREMENT_ONE (280)
INCREMENT (281)
PTR_SELECT (282)
LOGICAL_AND (283) 88
LOGICAL_OR (284) 89
LS_THAN_EQ (285) 82
GR_THAN_EQ (286) 83
EQ (287) 84
NOT_EQ (288) 85
LS_THAN (289) 86
GR_THAN (290) 87
DELIMITER (291) 38 90 91
OPEN_BRACES (292) 13 14 35 36 37 38
CLOSE_BRACES (293) 13 14 35 36 37 38
COMMA (294) 9 18 41 46
ASSIGN (295) 7 50
OPEN_PAR (296) 11 12 13 14 35 36 37 38 39 54
CLOSE_PAR (297) 11 12 13 14 35 36 37 38 39 54
OPEN_SQ_BRKT (298)
CLOSE_SQ_BRKT (299)
MINUS (300) 61
PLUS (301) 60
STAR (302) 62 80
FW_SLASH (303) 63
MODULO (304) 64
LS_SHIFT (305) 65
RS_SHIFT (306) 66
BITWISE_AND (307) 67
BITWISE_OR (308) 69
BITWISE_XOR (309) 68
BITWISE_NOT (310)
TERNARY_COND (311)
TERNARY_COLON (312)
ACCESS_DOT (313)
UNARY (314)


Nonterminals, with rules where they appear

$accept (60)
    on left: 0
code (61)
    on left: 1 2, on right: 0 1
STRUCTURE (62)
    on left: 3 4 5, on right: 1
GLODECL (63)
    on left: 6, on right: 3
INI_CONST (64)
    on left: 7 8, on right: 6 9
GLO_LIST (65)
    on left: 9 10, on right: 6 9
FUN_DECL (66)
    on left: 11 12, on right: 5
FUNC (67)
    on left: 13 14, on right: 4
ARG (68)
    on left: 15 16 17, on right: 11 12 13 14
arg (69)
    on left: 18 19, on right: 15 18
BODY (70)
    on left: 20 21, on right: 13 14 20 35 36
LOOPBODY (71)
    on left: 22 23, on right: 22 37 38
X (72)
    on left: 24 25 26, on right: 22
stmt (73)
    on left: 27 28 29 30 31 32 33 34, on right: 20 24
ifblock (74)
    on left: 35 36, on right: 28
whileblock (75)
    on left: 37, on right: 30
forblock (76)
    on left: 38, on right: 29
functioncall (77)
    on left: 39, on right: 31 44
temp (78)
    on left: 40 41, on right: 39 41
return_stm (79)
    on left: 42 43 44, on right: 33
DECL (80)
    on left: 45, on right: 27
VAR_LIST (81)
    on left: 46 47, on right: 45 46
TYPE (82)
    on left: 48 49, on right: 45 46
INITIALIZE (83)
    on left: 50 51, on right: 45 46
CONST (84)
    on left: 52 53, on right: 7 57
EXP (85)
    on left: 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69,
    on right: 32 35 36 37 38 40 41 42 50 54 55 56 60 61 62 63 64 65
    66 67 68 69
type (86)
    on left: 70, on right: 6 9 11 13 15 18 48
sign (87)
    on left: 71 72 73, on right: 70
dt (88)
    on left: 74 75 76 77 78 79, on right: 70
pt (89)
    on left: 80 81, on right: 70 80
RLOP (90)
    on left: 82 83 84 85 86 87, on right: 55
LGOP (91)
    on left: 88 89, on right: 56
sc (92)
    on left: 90 91, on right: 6 11 12 25 26 34 42 43 44 45 90


state 0

    0 $accept: . code $end

    SIGNED    shift, and go to state 1
    UNSIGNED  shift, and go to state 2
    VOID      shift, and go to state 3

    $end      reduce using rule 2 (code)
    $default  reduce using rule 73 (sign)

    code       go to state 4
    STRUCTURE  go to state 5
    GLODECL    go to state 6
    FUN_DECL   go to state 7
    FUNC       go to state 8
    type       go to state 9
    sign       go to state 10


state 1

   71 sign: SIGNED .

    $default  reduce using rule 71 (sign)


state 2

   72 sign: UNSIGNED .

    $default  reduce using rule 72 (sign)


state 3

   12 FUN_DECL: VOID . IDENTIFIER OPEN_PAR ARG CLOSE_PAR sc
   14 FUNC: VOID . IDENTIFIER OPEN_PAR ARG CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

    IDENTIFIER  shift, and go to state 11


state 4

    0 $accept: code . $end

    $end  shift, and go to state 12


state 5

    1 code: STRUCTURE . code

    SIGNED    shift, and go to state 1
    UNSIGNED  shift, and go to state 2
    VOID      shift, and go to state 3

    $end      reduce using rule 2 (code)
    $default  reduce using rule 73 (sign)

    code       go to state 13
    STRUCTURE  go to state 5
    GLODECL    go to state 6
    FUN_DECL   go to state 7
    FUNC       go to state 8
    type       go to state 9
    sign       go to state 10


state 6

    3 STRUCTURE: GLODECL .

    $default  reduce using rule 3 (STRUCTURE)


state 7

    5 STRUCTURE: FUN_DECL .

    $default  reduce using rule 5 (STRUCTURE)


state 8

    4 STRUCTURE: FUNC .

    $default  reduce using rule 4 (STRUCTURE)


state 9

    6 GLODECL: type . IDENTIFIER INI_CONST GLO_LIST sc
   11 FUN_DECL: type . IDENTIFIER OPEN_PAR ARG CLOSE_PAR sc
   13 FUNC: type . IDENTIFIER OPEN_PAR ARG CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

    IDENTIFIER  shift, and go to state 14


state 10

   70 type: sign . dt pt

    INT        shift, and go to state 15
    FLOAT      shift, and go to state 16
    CHAR       shift, and go to state 17
    LONG       shift, and go to state 18
    LONG_LONG  shift, and go to state 19
    SHORT      shift, and go to state 20

    dt  go to state 21


state 11

   12 FUN_DECL: VOID IDENTIFIER . OPEN_PAR ARG CLOSE_PAR sc
   14 FUNC: VOID IDENTIFIER . OPEN_PAR ARG CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

    OPEN_PAR  shift, and go to state 22


state 12

    0 $accept: code $end .

    $default  accept


state 13

    1 code: STRUCTURE code .

    $default  reduce using rule 1 (code)


state 14

    6 GLODECL: type IDENTIFIER . INI_CONST GLO_LIST sc
   11 FUN_DECL: type IDENTIFIER . OPEN_PAR ARG CLOSE_PAR sc
   13 FUNC: type IDENTIFIER . OPEN_PAR ARG CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

    ASSIGN    shift, and go to state 23
    OPEN_PAR  shift, and go to state 24

    $default  reduce using rule 8 (INI_CONST)

    INI_CONST  go to state 25


state 15

   74 dt: INT .

    $default  reduce using rule 74 (dt)


state 16

   75 dt: FLOAT .

    $default  reduce using rule 75 (dt)


state 17

   76 dt: CHAR .

    $default  reduce using rule 76 (dt)


state 18

   77 dt: LONG .

    $default  reduce using rule 77 (dt)


state 19

   78 dt: LONG_LONG .

    $default  reduce using rule 78 (dt)


state 20

   79 dt: SHORT .

    $default  reduce using rule 79 (dt)


state 21

   70 type: sign dt . pt

    STAR  shift, and go to state 26

    $default  reduce using rule 81 (pt)

    pt  go to state 27


state 22

   12 FUN_DECL: VOID IDENTIFIER OPEN_PAR . ARG CLOSE_PAR sc
   14 FUNC: VOID IDENTIFIER OPEN_PAR . ARG CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

    SIGNED    shift, and go to state 1
    UNSIGNED  shift, and go to state 2
    VOID      shift, and go to state 28

    CLOSE_PAR  reduce using rule 17 (ARG)
    $default   reduce using rule 73 (sign)

    ARG   go to state 29
    type  go to state 30
    sign  go to state 10


state 23

    7 INI_CONST: ASSIGN . CONST

    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32

    CONST  go to state 33


state 24

   11 FUN_DECL: type IDENTIFIER OPEN_PAR . ARG CLOSE_PAR sc
   13 FUNC: type IDENTIFIER OPEN_PAR . ARG CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

    SIGNED    shift, and go to state 1
    UNSIGNED  shift, and go to state 2
    VOID      shift, and go to state 28

    CLOSE_PAR  reduce using rule 17 (ARG)
    $default   reduce using rule 73 (sign)

    ARG   go to state 34
    type  go to state 30
    sign  go to state 10


state 25

    6 GLODECL: type IDENTIFIER INI_CONST . GLO_LIST sc

    COMMA  shift, and go to state 35

    $default  reduce using rule 10 (GLO_LIST)

    GLO_LIST  go to state 36


state 26

   80 pt: STAR . pt

    STAR  shift, and go to state 26

    $default  reduce using rule 81 (pt)

    pt  go to state 37


state 27

   70 type: sign dt pt .

    $default  reduce using rule 70 (type)


state 28

   16 ARG: VOID .

    $default  reduce using rule 16 (ARG)


state 29

   12 FUN_DECL: VOID IDENTIFIER OPEN_PAR ARG . CLOSE_PAR sc
   14 FUNC: VOID IDENTIFIER OPEN_PAR ARG . CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

    CLOSE_PAR  shift, and go to state 38


state 30

   15 ARG: type . IDENTIFIER arg

    IDENTIFIER  shift, and go to state 39


state 31

   53 CONST: HEX_CONSTANT .

    $default  reduce using rule 53 (CONST)


state 32

   52 CONST: DEC_CONSTANT .

    $default  reduce using rule 52 (CONST)


state 33

    7 INI_CONST: ASSIGN CONST .

    $default  reduce using rule 7 (INI_CONST)


state 34

   11 FUN_DECL: type IDENTIFIER OPEN_PAR ARG . CLOSE_PAR sc
   13 FUNC: type IDENTIFIER OPEN_PAR ARG . CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

    CLOSE_PAR  shift, and go to state 40


state 35

    9 GLO_LIST: COMMA . type IDENTIFIER INI_CONST GLO_LIST

    SIGNED    shift, and go to state 1
    UNSIGNED  shift, and go to state 2

    $default  reduce using rule 73 (sign)

    type  go to state 41
    sign  go to state 10


state 36

    6 GLODECL: type IDENTIFIER INI_CONST GLO_LIST . sc

    DELIMITER  shift, and go to state 42

    sc  go to state 43


state 37

   80 pt: STAR pt .

    $default  reduce using rule 80 (pt)


state 38

   12 FUN_DECL: VOID IDENTIFIER OPEN_PAR ARG CLOSE_PAR . sc
   14 FUNC: VOID IDENTIFIER OPEN_PAR ARG CLOSE_PAR . OPEN_BRACES BODY CLOSE_BRACES

    DELIMITER    shift, and go to state 42
    OPEN_BRACES  shift, and go to state 44

    sc  go to state 45


state 39

   15 ARG: type IDENTIFIER . arg

    COMMA  shift, and go to state 46

    $default  reduce using rule 19 (arg)

    arg  go to state 47


state 40

   11 FUN_DECL: type IDENTIFIER OPEN_PAR ARG CLOSE_PAR . sc
   13 FUNC: type IDENTIFIER OPEN_PAR ARG CLOSE_PAR . OPEN_BRACES BODY CLOSE_BRACES

    DELIMITER    shift, and go to state 42
    OPEN_BRACES  shift, and go to state 48

    sc  go to state 49


state 41

    9 GLO_LIST: COMMA type . IDENTIFIER INI_CONST GLO_LIST

    IDENTIFIER  shift, and go to state 50


state 42

   90 sc: DELIMITER . sc
   91   | DELIMITER .

    DELIMITER  shift, and go to state 42

    DELIMITER  [reduce using rule 91 (sc)]
    $default   reduce using rule 91 (sc)

    sc  go to state 51


state 43

    6 GLODECL: type IDENTIFIER INI_CONST GLO_LIST sc .

    $default  reduce using rule 6 (GLODECL)


state 44

   14 FUNC: VOID IDENTIFIER OPEN_PAR ARG CLOSE_PAR OPEN_BRACES . BODY CLOSE_BRACES

    SIGNED        shift, and go to state 1
    UNSIGNED      shift, and go to state 2
    FOR           shift, and go to state 52
    WHILE         shift, and go to state 53
    IF            shift, and go to state 54
    RETURN        shift, and go to state 55
    IDENTIFIER    shift, and go to state 56
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    DELIMITER     shift, and go to state 42
    OPEN_PAR      shift, and go to state 58

    IDENTIFIER    [reduce using rule 49 (TYPE)]
    CLOSE_BRACES  reduce using rule 21 (BODY)
    $default      reduce using rule 73 (sign)

    BODY          go to state 59
    stmt          go to state 60
    ifblock       go to state 61
    whileblock    go to state 62
    forblock      go to state 63
    functioncall  go to state 64
    return_stm    go to state 65
    DECL          go to state 66
    TYPE          go to state 67
    CONST         go to state 68
    EXP           go to state 69
    type          go to state 70
    sign          go to state 10
    sc            go to state 71


state 45

   12 FUN_DECL: VOID IDENTIFIER OPEN_PAR ARG CLOSE_PAR sc .

    $default  reduce using rule 12 (FUN_DECL)


state 46

   18 arg: COMMA . type IDENTIFIER arg

    SIGNED    shift, and go to state 1
    UNSIGNED  shift, and go to state 2

    $default  reduce using rule 73 (sign)

    type  go to state 72
    sign  go to state 10


state 47

   15 ARG: type IDENTIFIER arg .

    $default  reduce using rule 15 (ARG)


state 48

   13 FUNC: type IDENTIFIER OPEN_PAR ARG CLOSE_PAR OPEN_BRACES . BODY CLOSE_BRACES

    SIGNED        shift, and go to state 1
    UNSIGNED      shift, and go to state 2
    FOR           shift, and go to state 52
    WHILE         shift, and go to state 53
    IF            shift, and go to state 54
    RETURN        shift, and go to state 55
    IDENTIFIER    shift, and go to state 56
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    DELIMITER     shift, and go to state 42
    OPEN_PAR      shift, and go to state 58

    IDENTIFIER    [reduce using rule 49 (TYPE)]
    CLOSE_BRACES  reduce using rule 21 (BODY)
    $default      reduce using rule 73 (sign)

    BODY          go to state 73
    stmt          go to state 60
    ifblock       go to state 61
    whileblock    go to state 62
    forblock      go to state 63
    functioncall  go to state 64
    return_stm    go to state 65
    DECL          go to state 66
    TYPE          go to state 67
    CONST         go to state 68
    EXP           go to state 69
    type          go to state 70
    sign          go to state 10
    sc            go to state 71


state 49

   11 FUN_DECL: type IDENTIFIER OPEN_PAR ARG CLOSE_PAR sc .

    $default  reduce using rule 11 (FUN_DECL)


state 50

    9 GLO_LIST: COMMA type IDENTIFIER . INI_CONST GLO_LIST

    ASSIGN  shift, and go to state 23

    $default  reduce using rule 8 (INI_CONST)

    INI_CONST  go to state 74


state 51

   90 sc: DELIMITER sc .

    $default  reduce using rule 90 (sc)


state 52

   38 forblock: FOR . OPEN_PAR EXP DELIMITER EXP DELIMITER EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES

    OPEN_PAR  shift, and go to state 75


state 53

   37 whileblock: WHILE . OPEN_PAR EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES

    OPEN_PAR  shift, and go to state 76


state 54

   35 ifblock: IF . OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES ELSE OPEN_BRACES BODY CLOSE_BRACES
   36        | IF . OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

    OPEN_PAR  shift, and go to state 77


state 55

   42 return_stm: RETURN . EXP sc
   43           | RETURN . sc
   44           | RETURN . functioncall sc

    IDENTIFIER    shift, and go to state 56
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    DELIMITER     shift, and go to state 42
    OPEN_PAR      shift, and go to state 58

    functioncall  go to state 78
    CONST         go to state 68
    EXP           go to state 79
    sc            go to state 80


state 56

   39 functioncall: IDENTIFIER . OPEN_PAR temp CLOSE_PAR
   58 EXP: IDENTIFIER .

    OPEN_PAR  shift, and go to state 81

    OPEN_PAR  [reduce using rule 58 (EXP)]
    $default  reduce using rule 58 (EXP)


state 57

   59 EXP: STRING .

    $default  reduce using rule 59 (EXP)


state 58

   54 EXP: OPEN_PAR . EXP CLOSE_PAR

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 83


state 59

   14 FUNC: VOID IDENTIFIER OPEN_PAR ARG CLOSE_PAR OPEN_BRACES BODY . CLOSE_BRACES

    CLOSE_BRACES  shift, and go to state 84


state 60

   20 BODY: stmt . BODY

    SIGNED        shift, and go to state 1
    UNSIGNED      shift, and go to state 2
    FOR           shift, and go to state 52
    WHILE         shift, and go to state 53
    IF            shift, and go to state 54
    RETURN        shift, and go to state 55
    IDENTIFIER    shift, and go to state 56
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    DELIMITER     shift, and go to state 42
    OPEN_PAR      shift, and go to state 58

    IDENTIFIER    [reduce using rule 49 (TYPE)]
    CLOSE_BRACES  reduce using rule 21 (BODY)
    $default      reduce using rule 73 (sign)

    BODY          go to state 85
    stmt          go to state 60
    ifblock       go to state 61
    whileblock    go to state 62
    forblock      go to state 63
    functioncall  go to state 64
    return_stm    go to state 65
    DECL          go to state 66
    TYPE          go to state 67
    CONST         go to state 68
    EXP           go to state 69
    type          go to state 70
    sign          go to state 10
    sc            go to state 71


state 61

   28 stmt: ifblock .

    $default  reduce using rule 28 (stmt)


state 62

   30 stmt: whileblock .

    $default  reduce using rule 30 (stmt)


state 63

   29 stmt: forblock .

    $default  reduce using rule 29 (stmt)


state 64

   31 stmt: functioncall .

    $default  reduce using rule 31 (stmt)


state 65

   33 stmt: return_stm .

    $default  reduce using rule 33 (stmt)


state 66

   27 stmt: DECL .

    $default  reduce using rule 27 (stmt)


state 67

   45 DECL: TYPE . IDENTIFIER INITIALIZE VAR_LIST sc

    IDENTIFIER  shift, and go to state 86


state 68

   57 EXP: CONST .

    $default  reduce using rule 57 (EXP)


state 69

   32 stmt: EXP .
   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 32 (stmt)

    RLOP  go to state 105
    LGOP  go to state 106


state 70

   48 TYPE: type .

    $default  reduce using rule 48 (TYPE)


state 71

   34 stmt: sc .

    $default  reduce using rule 34 (stmt)


state 72

   18 arg: COMMA type . IDENTIFIER arg

    IDENTIFIER  shift, and go to state 107


state 73

   13 FUNC: type IDENTIFIER OPEN_PAR ARG CLOSE_PAR OPEN_BRACES BODY . CLOSE_BRACES

    CLOSE_BRACES  shift, and go to state 108


state 74

    9 GLO_LIST: COMMA type IDENTIFIER INI_CONST . GLO_LIST

    COMMA  shift, and go to state 35

    $default  reduce using rule 10 (GLO_LIST)

    GLO_LIST  go to state 109


state 75

   38 forblock: FOR OPEN_PAR . EXP DELIMITER EXP DELIMITER EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 110


state 76

   37 whileblock: WHILE OPEN_PAR . EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 111


state 77

   35 ifblock: IF OPEN_PAR . EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES ELSE OPEN_BRACES BODY CLOSE_BRACES
   36        | IF OPEN_PAR . EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 112


state 78

   44 return_stm: RETURN functioncall . sc

    DELIMITER  shift, and go to state 42

    sc  go to state 113


state 79

   42 return_stm: RETURN EXP . sc
   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    DELIMITER    shift, and go to state 42
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    RLOP  go to state 105
    LGOP  go to state 106
    sc    go to state 114


state 80

   43 return_stm: RETURN sc .

    $default  reduce using rule 43 (return_stm)


state 81

   39 functioncall: IDENTIFIER OPEN_PAR . temp CLOSE_PAR

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    temp   go to state 115
    CONST  go to state 68
    EXP    go to state 116


state 82

   58 EXP: IDENTIFIER .

    $default  reduce using rule 58 (EXP)


state 83

   54 EXP: OPEN_PAR EXP . CLOSE_PAR
   55    | EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    CLOSE_PAR    shift, and go to state 117
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    RLOP  go to state 105
    LGOP  go to state 106


state 84

   14 FUNC: VOID IDENTIFIER OPEN_PAR ARG CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES .

    $default  reduce using rule 14 (FUNC)


state 85

   20 BODY: stmt BODY .

    $default  reduce using rule 20 (BODY)


state 86

   45 DECL: TYPE IDENTIFIER . INITIALIZE VAR_LIST sc

    ASSIGN  shift, and go to state 118

    $default  reduce using rule 51 (INITIALIZE)

    INITIALIZE  go to state 119


state 87

   88 LGOP: LOGICAL_AND .

    $default  reduce using rule 88 (LGOP)


state 88

   89 LGOP: LOGICAL_OR .

    $default  reduce using rule 89 (LGOP)


state 89

   82 RLOP: LS_THAN_EQ .

    $default  reduce using rule 82 (RLOP)


state 90

   83 RLOP: GR_THAN_EQ .

    $default  reduce using rule 83 (RLOP)


state 91

   84 RLOP: EQ .

    $default  reduce using rule 84 (RLOP)


state 92

   85 RLOP: NOT_EQ .

    $default  reduce using rule 85 (RLOP)


state 93

   86 RLOP: LS_THAN .

    $default  reduce using rule 86 (RLOP)


state 94

   87 RLOP: GR_THAN .

    $default  reduce using rule 87 (RLOP)


state 95

   61 EXP: EXP MINUS . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 120


state 96

   60 EXP: EXP PLUS . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 121


state 97

   62 EXP: EXP STAR . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 122


state 98

   63 EXP: EXP FW_SLASH . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 123


state 99

   64 EXP: EXP MODULO . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 124


state 100

   65 EXP: EXP LS_SHIFT . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 125


state 101

   66 EXP: EXP RS_SHIFT . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 126


state 102

   67 EXP: EXP BITWISE_AND . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 127


state 103

   69 EXP: EXP BITWISE_OR . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 128


state 104

   68 EXP: EXP BITWISE_XOR . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 129


state 105

   55 EXP: EXP RLOP . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 130


state 106

   56 EXP: EXP LGOP . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 131


state 107

   18 arg: COMMA type IDENTIFIER . arg

    COMMA  shift, and go to state 46

    $default  reduce using rule 19 (arg)

    arg  go to state 132


state 108

   13 FUNC: type IDENTIFIER OPEN_PAR ARG CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES .

    $default  reduce using rule 13 (FUNC)


state 109

    9 GLO_LIST: COMMA type IDENTIFIER INI_CONST GLO_LIST .

    $default  reduce using rule 9 (GLO_LIST)


state 110

   38 forblock: FOR OPEN_PAR EXP . DELIMITER EXP DELIMITER EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES
   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    DELIMITER    shift, and go to state 133
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    RLOP  go to state 105
    LGOP  go to state 106


state 111

   37 whileblock: WHILE OPEN_PAR EXP . CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES
   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    CLOSE_PAR    shift, and go to state 134
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    RLOP  go to state 105
    LGOP  go to state 106


state 112

   35 ifblock: IF OPEN_PAR EXP . CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES ELSE OPEN_BRACES BODY CLOSE_BRACES
   36        | IF OPEN_PAR EXP . CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES
   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    CLOSE_PAR    shift, and go to state 135
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    RLOP  go to state 105
    LGOP  go to state 106


state 113

   44 return_stm: RETURN functioncall sc .

    $default  reduce using rule 44 (return_stm)


state 114

   42 return_stm: RETURN EXP sc .

    $default  reduce using rule 42 (return_stm)


state 115

   39 functioncall: IDENTIFIER OPEN_PAR temp . CLOSE_PAR
   41 temp: temp . COMMA EXP

    COMMA      shift, and go to state 136
    CLOSE_PAR  shift, and go to state 137


state 116

   40 temp: EXP .
   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 40 (temp)

    RLOP  go to state 105
    LGOP  go to state 106


state 117

   54 EXP: OPEN_PAR EXP CLOSE_PAR .

    $default  reduce using rule 54 (EXP)


state 118

   50 INITIALIZE: ASSIGN . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 138


state 119

   45 DECL: TYPE IDENTIFIER INITIALIZE . VAR_LIST sc

    COMMA  shift, and go to state 139

    $default  reduce using rule 47 (VAR_LIST)

    VAR_LIST  go to state 140


state 120

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   61    | EXP MINUS EXP .
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 61 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 121

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   60    | EXP PLUS EXP .
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 60 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 122

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   62    | EXP STAR EXP .
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 62 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 123

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   63    | EXP FW_SLASH EXP .
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 63 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 124

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   64    | EXP MODULO EXP .
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 64 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 125

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   65    | EXP LS_SHIFT EXP .
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 65 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 126

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   66    | EXP RS_SHIFT EXP .
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 66 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 127

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   67    | EXP BITWISE_AND EXP .
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 67 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 128

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP
   69    | EXP BITWISE_OR EXP .

    $default  reduce using rule 69 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 129

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   68    | EXP BITWISE_XOR EXP .
   69    | EXP . BITWISE_OR EXP

    BITWISE_OR  shift, and go to state 103

    $default  reduce using rule 68 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 130

   55 EXP: EXP . RLOP EXP
   55    | EXP RLOP EXP .
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    LOGICAL_AND  [reduce using rule 55 (EXP)]
    LOGICAL_OR   [reduce using rule 55 (EXP)]
    LS_THAN_EQ   [reduce using rule 55 (EXP)]
    GR_THAN_EQ   [reduce using rule 55 (EXP)]
    EQ           [reduce using rule 55 (EXP)]
    NOT_EQ       [reduce using rule 55 (EXP)]
    LS_THAN      [reduce using rule 55 (EXP)]
    GR_THAN      [reduce using rule 55 (EXP)]
    MINUS        [reduce using rule 55 (EXP)]
    PLUS         [reduce using rule 55 (EXP)]
    STAR         [reduce using rule 55 (EXP)]
    FW_SLASH     [reduce using rule 55 (EXP)]
    MODULO       [reduce using rule 55 (EXP)]
    LS_SHIFT     [reduce using rule 55 (EXP)]
    RS_SHIFT     [reduce using rule 55 (EXP)]
    BITWISE_AND  [reduce using rule 55 (EXP)]
    BITWISE_OR   [reduce using rule 55 (EXP)]
    BITWISE_XOR  [reduce using rule 55 (EXP)]
    $default     reduce using rule 55 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 131

   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   56    | EXP LGOP EXP .
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    LOGICAL_AND  [reduce using rule 56 (EXP)]
    LOGICAL_OR   [reduce using rule 56 (EXP)]
    LS_THAN_EQ   [reduce using rule 56 (EXP)]
    GR_THAN_EQ   [reduce using rule 56 (EXP)]
    EQ           [reduce using rule 56 (EXP)]
    NOT_EQ       [reduce using rule 56 (EXP)]
    LS_THAN      [reduce using rule 56 (EXP)]
    GR_THAN      [reduce using rule 56 (EXP)]
    MINUS        [reduce using rule 56 (EXP)]
    PLUS         [reduce using rule 56 (EXP)]
    STAR         [reduce using rule 56 (EXP)]
    FW_SLASH     [reduce using rule 56 (EXP)]
    MODULO       [reduce using rule 56 (EXP)]
    LS_SHIFT     [reduce using rule 56 (EXP)]
    RS_SHIFT     [reduce using rule 56 (EXP)]
    BITWISE_AND  [reduce using rule 56 (EXP)]
    BITWISE_OR   [reduce using rule 56 (EXP)]
    BITWISE_XOR  [reduce using rule 56 (EXP)]
    $default     reduce using rule 56 (EXP)

    RLOP  go to state 105
    LGOP  go to state 106


state 132

   18 arg: COMMA type IDENTIFIER arg .

    $default  reduce using rule 18 (arg)


state 133

   38 forblock: FOR OPEN_PAR EXP DELIMITER . EXP DELIMITER EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 141


state 134

   37 whileblock: WHILE OPEN_PAR EXP CLOSE_PAR . OPEN_BRACES LOOPBODY CLOSE_BRACES

    OPEN_BRACES  shift, and go to state 142


state 135

   35 ifblock: IF OPEN_PAR EXP CLOSE_PAR . OPEN_BRACES BODY CLOSE_BRACES ELSE OPEN_BRACES BODY CLOSE_BRACES
   36        | IF OPEN_PAR EXP CLOSE_PAR . OPEN_BRACES BODY CLOSE_BRACES

    OPEN_BRACES  shift, and go to state 143


state 136

   41 temp: temp COMMA . EXP

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 144


state 137

   39 functioncall: IDENTIFIER OPEN_PAR temp CLOSE_PAR .

    $default  reduce using rule 39 (functioncall)


state 138

   50 INITIALIZE: ASSIGN EXP .
   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 50 (INITIALIZE)

    RLOP  go to state 105
    LGOP  go to state 106


state 139

   46 VAR_LIST: COMMA . TYPE IDENTIFIER INITIALIZE VAR_LIST

    SIGNED    shift, and go to state 1
    UNSIGNED  shift, and go to state 2

    IDENTIFIER  reduce using rule 49 (TYPE)
    $default    reduce using rule 73 (sign)

    TYPE  go to state 145
    type  go to state 70
    sign  go to state 10


state 140

   45 DECL: TYPE IDENTIFIER INITIALIZE VAR_LIST . sc

    DELIMITER  shift, and go to state 42

    sc  go to state 146


state 141

   38 forblock: FOR OPEN_PAR EXP DELIMITER EXP . DELIMITER EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES
   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    DELIMITER    shift, and go to state 147
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    RLOP  go to state 105
    LGOP  go to state 106


state 142

   37 whileblock: WHILE OPEN_PAR EXP CLOSE_PAR OPEN_BRACES . LOOPBODY CLOSE_BRACES

    SIGNED        shift, and go to state 1
    UNSIGNED      shift, and go to state 2
    FOR           shift, and go to state 52
    WHILE         shift, and go to state 53
    BREAK         shift, and go to state 148
    CONTINUE      shift, and go to state 149
    IF            shift, and go to state 54
    RETURN        shift, and go to state 55
    IDENTIFIER    shift, and go to state 56
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    DELIMITER     shift, and go to state 42
    OPEN_PAR      shift, and go to state 58

    IDENTIFIER    [reduce using rule 49 (TYPE)]
    CLOSE_BRACES  reduce using rule 23 (LOOPBODY)
    $default      reduce using rule 73 (sign)

    LOOPBODY      go to state 150
    X             go to state 151
    stmt          go to state 152
    ifblock       go to state 61
    whileblock    go to state 62
    forblock      go to state 63
    functioncall  go to state 64
    return_stm    go to state 65
    DECL          go to state 66
    TYPE          go to state 67
    CONST         go to state 68
    EXP           go to state 69
    type          go to state 70
    sign          go to state 10
    sc            go to state 71


state 143

   35 ifblock: IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES . BODY CLOSE_BRACES ELSE OPEN_BRACES BODY CLOSE_BRACES
   36        | IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES . BODY CLOSE_BRACES

    SIGNED        shift, and go to state 1
    UNSIGNED      shift, and go to state 2
    FOR           shift, and go to state 52
    WHILE         shift, and go to state 53
    IF            shift, and go to state 54
    RETURN        shift, and go to state 55
    IDENTIFIER    shift, and go to state 56
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    DELIMITER     shift, and go to state 42
    OPEN_PAR      shift, and go to state 58

    IDENTIFIER    [reduce using rule 49 (TYPE)]
    CLOSE_BRACES  reduce using rule 21 (BODY)
    $default      reduce using rule 73 (sign)

    BODY          go to state 153
    stmt          go to state 60
    ifblock       go to state 61
    whileblock    go to state 62
    forblock      go to state 63
    functioncall  go to state 64
    return_stm    go to state 65
    DECL          go to state 66
    TYPE          go to state 67
    CONST         go to state 68
    EXP           go to state 69
    type          go to state 70
    sign          go to state 10
    sc            go to state 71


state 144

   41 temp: temp COMMA EXP .
   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    $default  reduce using rule 41 (temp)

    RLOP  go to state 105
    LGOP  go to state 106


state 145

   46 VAR_LIST: COMMA TYPE . IDENTIFIER INITIALIZE VAR_LIST

    IDENTIFIER  shift, and go to state 154


state 146

   45 DECL: TYPE IDENTIFIER INITIALIZE VAR_LIST sc .

    $default  reduce using rule 45 (DECL)


state 147

   38 forblock: FOR OPEN_PAR EXP DELIMITER EXP DELIMITER . EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES

    IDENTIFIER    shift, and go to state 82
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    OPEN_PAR      shift, and go to state 58

    CONST  go to state 68
    EXP    go to state 155


state 148

   25 X: BREAK . sc

    DELIMITER  shift, and go to state 42

    sc  go to state 156


state 149

   26 X: CONTINUE . sc

    DELIMITER  shift, and go to state 42

    sc  go to state 157


state 150

   37 whileblock: WHILE OPEN_PAR EXP CLOSE_PAR OPEN_BRACES LOOPBODY . CLOSE_BRACES

    CLOSE_BRACES  shift, and go to state 158


state 151

   22 LOOPBODY: X . LOOPBODY

    SIGNED        shift, and go to state 1
    UNSIGNED      shift, and go to state 2
    FOR           shift, and go to state 52
    WHILE         shift, and go to state 53
    BREAK         shift, and go to state 148
    CONTINUE      shift, and go to state 149
    IF            shift, and go to state 54
    RETURN        shift, and go to state 55
    IDENTIFIER    shift, and go to state 56
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    DELIMITER     shift, and go to state 42
    OPEN_PAR      shift, and go to state 58

    IDENTIFIER    [reduce using rule 49 (TYPE)]
    CLOSE_BRACES  reduce using rule 23 (LOOPBODY)
    $default      reduce using rule 73 (sign)

    LOOPBODY      go to state 159
    X             go to state 151
    stmt          go to state 152
    ifblock       go to state 61
    whileblock    go to state 62
    forblock      go to state 63
    functioncall  go to state 64
    return_stm    go to state 65
    DECL          go to state 66
    TYPE          go to state 67
    CONST         go to state 68
    EXP           go to state 69
    type          go to state 70
    sign          go to state 10
    sc            go to state 71


state 152

   24 X: stmt .

    $default  reduce using rule 24 (X)


state 153

   35 ifblock: IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY . CLOSE_BRACES ELSE OPEN_BRACES BODY CLOSE_BRACES
   36        | IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY . CLOSE_BRACES

    CLOSE_BRACES  shift, and go to state 160


state 154

   46 VAR_LIST: COMMA TYPE IDENTIFIER . INITIALIZE VAR_LIST

    ASSIGN  shift, and go to state 118

    $default  reduce using rule 51 (INITIALIZE)

    INITIALIZE  go to state 161


state 155

   38 forblock: FOR OPEN_PAR EXP DELIMITER EXP DELIMITER EXP . CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES
   55 EXP: EXP . RLOP EXP
   56    | EXP . LGOP EXP
   60    | EXP . PLUS EXP
   61    | EXP . MINUS EXP
   62    | EXP . STAR EXP
   63    | EXP . FW_SLASH EXP
   64    | EXP . MODULO EXP
   65    | EXP . LS_SHIFT EXP
   66    | EXP . RS_SHIFT EXP
   67    | EXP . BITWISE_AND EXP
   68    | EXP . BITWISE_XOR EXP
   69    | EXP . BITWISE_OR EXP

    LOGICAL_AND  shift, and go to state 87
    LOGICAL_OR   shift, and go to state 88
    LS_THAN_EQ   shift, and go to state 89
    GR_THAN_EQ   shift, and go to state 90
    EQ           shift, and go to state 91
    NOT_EQ       shift, and go to state 92
    LS_THAN      shift, and go to state 93
    GR_THAN      shift, and go to state 94
    CLOSE_PAR    shift, and go to state 162
    MINUS        shift, and go to state 95
    PLUS         shift, and go to state 96
    STAR         shift, and go to state 97
    FW_SLASH     shift, and go to state 98
    MODULO       shift, and go to state 99
    LS_SHIFT     shift, and go to state 100
    RS_SHIFT     shift, and go to state 101
    BITWISE_AND  shift, and go to state 102
    BITWISE_OR   shift, and go to state 103
    BITWISE_XOR  shift, and go to state 104

    RLOP  go to state 105
    LGOP  go to state 106


state 156

   25 X: BREAK sc .

    $default  reduce using rule 25 (X)


state 157

   26 X: CONTINUE sc .

    $default  reduce using rule 26 (X)


state 158

   37 whileblock: WHILE OPEN_PAR EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES .

    $default  reduce using rule 37 (whileblock)


state 159

   22 LOOPBODY: X LOOPBODY .

    $default  reduce using rule 22 (LOOPBODY)


state 160

   35 ifblock: IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES . ELSE OPEN_BRACES BODY CLOSE_BRACES
   36        | IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES .

    ELSE  shift, and go to state 163

    $default  reduce using rule 36 (ifblock)


state 161

   46 VAR_LIST: COMMA TYPE IDENTIFIER INITIALIZE . VAR_LIST

    COMMA  shift, and go to state 139

    $default  reduce using rule 47 (VAR_LIST)

    VAR_LIST  go to state 164


state 162

   38 forblock: FOR OPEN_PAR EXP DELIMITER EXP DELIMITER EXP CLOSE_PAR . OPEN_BRACES LOOPBODY CLOSE_BRACES

    OPEN_BRACES  shift, and go to state 165


state 163

   35 ifblock: IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES ELSE . OPEN_BRACES BODY CLOSE_BRACES

    OPEN_BRACES  shift, and go to state 166


state 164

   46 VAR_LIST: COMMA TYPE IDENTIFIER INITIALIZE VAR_LIST .

    $default  reduce using rule 46 (VAR_LIST)


state 165

   38 forblock: FOR OPEN_PAR EXP DELIMITER EXP DELIMITER EXP CLOSE_PAR OPEN_BRACES . LOOPBODY CLOSE_BRACES

    SIGNED        shift, and go to state 1
    UNSIGNED      shift, and go to state 2
    FOR           shift, and go to state 52
    WHILE         shift, and go to state 53
    BREAK         shift, and go to state 148
    CONTINUE      shift, and go to state 149
    IF            shift, and go to state 54
    RETURN        shift, and go to state 55
    IDENTIFIER    shift, and go to state 56
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    DELIMITER     shift, and go to state 42
    OPEN_PAR      shift, and go to state 58

    IDENTIFIER    [reduce using rule 49 (TYPE)]
    CLOSE_BRACES  reduce using rule 23 (LOOPBODY)
    $default      reduce using rule 73 (sign)

    LOOPBODY      go to state 167
    X             go to state 151
    stmt          go to state 152
    ifblock       go to state 61
    whileblock    go to state 62
    forblock      go to state 63
    functioncall  go to state 64
    return_stm    go to state 65
    DECL          go to state 66
    TYPE          go to state 67
    CONST         go to state 68
    EXP           go to state 69
    type          go to state 70
    sign          go to state 10
    sc            go to state 71


state 166

   35 ifblock: IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES ELSE OPEN_BRACES . BODY CLOSE_BRACES

    SIGNED        shift, and go to state 1
    UNSIGNED      shift, and go to state 2
    FOR           shift, and go to state 52
    WHILE         shift, and go to state 53
    IF            shift, and go to state 54
    RETURN        shift, and go to state 55
    IDENTIFIER    shift, and go to state 56
    HEX_CONSTANT  shift, and go to state 31
    DEC_CONSTANT  shift, and go to state 32
    STRING        shift, and go to state 57
    DELIMITER     shift, and go to state 42
    OPEN_PAR      shift, and go to state 58

    IDENTIFIER    [reduce using rule 49 (TYPE)]
    CLOSE_BRACES  reduce using rule 21 (BODY)
    $default      reduce using rule 73 (sign)

    BODY          go to state 168
    stmt          go to state 60
    ifblock       go to state 61
    whileblock    go to state 62
    forblock      go to state 63
    functioncall  go to state 64
    return_stm    go to state 65
    DECL          go to state 66
    TYPE          go to state 67
    CONST         go to state 68
    EXP           go to state 69
    type          go to state 70
    sign          go to state 10
    sc            go to state 71


state 167

   38 forblock: FOR OPEN_PAR EXP DELIMITER EXP DELIMITER EXP CLOSE_PAR OPEN_BRACES LOOPBODY . CLOSE_BRACES

    CLOSE_BRACES  shift, and go to state 169


state 168

   35 ifblock: IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES ELSE OPEN_BRACES BODY . CLOSE_BRACES

    CLOSE_BRACES  shift, and go to state 170


state 169

   38 forblock: FOR OPEN_PAR EXP DELIMITER EXP DELIMITER EXP CLOSE_PAR OPEN_BRACES LOOPBODY CLOSE_BRACES .

    $default  reduce using rule 38 (forblock)


state 170

   35 ifblock: IF OPEN_PAR EXP CLOSE_PAR OPEN_BRACES BODY CLOSE_BRACES ELSE OPEN_BRACES BODY CLOSE_BRACES .

    $default  reduce using rule 35 (ifblock)
